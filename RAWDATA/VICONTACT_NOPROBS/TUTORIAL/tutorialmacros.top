outputmacro: ^tutorialstart()
# create trialdata array
$counter=0 
$count=0
$trialdata=^jsoncreate(array)

# sentence data
$sentencedata=^jsoncreate(array)
$_i=0
loop(10){
    $_i += 1
    $sentence=^jsoncreate(PERMANENT object)
    # $sentence
    $_trial = ^join( \~ trial $_i)
    loop(){
    $$word = ^Iterator(? member $_trial)
    # $$word
    $_tmp = ^join(AUTOSPACE $_tmp $$word)
    }
    $sentence = $_tmp
    $_tmp = null
    ^jsonarrayinsert(PERMANENT $sentencedata $sentence)
}

outputmacro: ^createtrialobjects($_whichtrial)

# get length of trial, actual input and their difference
$_tlength = ^length($_whichtrial) 
$_ilength = ^length(%originalinput)
$_diffit = $_ilength - $_tlength

# create objects inside array for each word the trial-concept containing the word to match
loop(){
    $$word = ^Iterator(? member $_whichtrial)
    $trial = ^jsoncreate(object)
    $trial.matchword = $$word
    ^jsonarrayinsert($trialdata $trial)
    }

# put the inputword in the corresponding object of same positioned matchword//get rid of <UNK> kaldi problem
$_i = 0
$_counter= 1
loop($_ilength){
    $_inputword = ^wordatindex(original $_counter)
    if ($_inputword==">") {
        $trialdata[$_i].inputword = "unknown"
        $_i += 1
        $_counter += 1
    } else if ($_inputword=="<"){
        $_counter += 1
    } else if ($_inputword=="UNK"){
        $_counter += 1
    } else {
        $trialdata[$_i].inputword = $_inputword
        $_i += 1
        $_counter += 1
    }
}

# if input is longer than the trial length, than add a "NaN"-matchword for the additional objects
if ($_ilength>$_tlength) {
    loop($_diffit){
        $trial = ^jsoncreate(object)
        $trial.inputword = ^wordatindex(original $_counter)
        $trial.matchword = "NaN"
        ^jsonarrayinsert($trialdata $trial)
        $_counter += 1
    }
}


outputmacro: ^wordcomparison()
$_i = 0
loop(^length($trialdata)) {
if ($trialdata[$_i].inputword==$trialdata[$_i].matchword) {
    $trialdata[$_i].correct = "true"
} else if ($trialdata[$_i].inputword==null){
    $trialdata[$_i].inputword = "NaN"
    $trialdata[$_i].correct = "false"
} else { 
    $trialdata[$_i].correct = "false"
}
$_wordnr = $_i + 1
$trialdata[$_i].wordnr = ^"\"$_wordnr\""
$trialdata[$_i].trialnr = ^"\"$trialnr\""
$_i += 1
}

outputmacro: ^buzzcomparison($_whichbuzz)

# add object with buzzwords    
$buzz = ^jsoncreate(object)
$_counter=1
$_accuracy = 0
# find buzzwords in user input
loop(){
    $_buzzkey = ^join(buzzword $_counter)
    $_buzzcorrect = ^join(buzz $_counter correct)
    $$buzzword = ^Iterator(? member $_whichbuzz)
    $buzz.$_buzzkey = $$buzzword
    if (^findtext(%originalinput $$buzzword 0 insensitive)) {
        $buzz.$_buzzcorrect = "true"
        $_accuracy += 1
    } else {
        $buzz.$_buzzcorrect = "false"
    }
    $_counter += 1
}
# calculate accuracy for number of correct buzzwords
$buzzaccuracy = 100 / 3 * $_accuracy
$buzz.buzzaccuracy = ^join(\" ^"$buzzaccuracy" % \")
^jsonarrayinsert($trialdata $buzz)

outputmacro: ^nexttrial()
$next = ^jsoncreate(object)
if ($trialnr==10) {
$next.nextsentence = end
} else {
   $next.nextsentence = $sentencedata[$trialnr]
}
^jsonarrayinsert($trialdata $next)




outputmacro: ^jsonresults($_trial $_buzz)
^createtrialobjects($_trial)
^wordcomparison()
^buzzcomparison($_buzz)
^nexttrial()
$trialnr += 1
^jsonwrite($trialdata)
outputmacro: ^myfunc(^data) ($$concept)
	$$wordindex += 1			# count words in each sentence
	_0 = ^burst(^data ^"\t")	# Treetagger returns a tabbed triple of original word, tag, lemma
	$$concept = ^join(~ _1)		# we turn tag into a concept
	^settag($$wordindex $$concept )	# set the tag concept
	^setcanon($$wordindex _2 )	# set the canonical form to ChatScript

#outputmacro: ^oob(^value)
	#$$oob = ^join($$oob " " ^value)


outputmacro: ^accuracy()


$accuracy = $sumcorrect / 5 * 100


outputmacro: ^oob()
 
 $_correct = $$correct
 $_sumcorrect = $sumcorrect
 $_accuracy = $accuracy



 $_item1name = correct
 $_item1value = $_correct
 $_item2name = sumcorrect
 $_item2value = $_sumcorrect
 $_item3name = accuracy
 $_item3value = $_accuracy
 



 # join it all together for a string output using pipe '|' between items and using ':' between item name and value
 $$oob = ^join($_item1name : $_item1value " " \| " " $_item2name : $_item2value " " \| " " $_item3name : $_item3value "%")



topic: ~xPOSTAGSENTENCE system()
t: (_* )  # memorize sentence to pass to tagger
t: ( ) 
	$$wordindex = 0					# need to start over for each sentence, used to locate word in sentence
	^log(FILE  chat.txt NEW '_0 )	# non-commercial version reads a file, so write our sentence to a file
#	^popen("tag-english chat.txt" '^myfunc)
	^popen("tree-tagger-german chat.txt" '^myfunc) # invoke local copy of TreeTagger german
